#!/usr/bin/env python

import ngmix
import numpy as np
import esutil as eu
from esutil.numpy_util import between
import hickory
from hickory import Table
from desclass import staramp
from desclass import bf


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--flist', nargs='+', required=True)
    parser.add_argument('--rmag-index', type=int, required=True)
    parser.add_argument('--output')
    parser.add_argument('--show', action='store_true')
    return parser.parse_args()


def _read(*, flist, ext):
    t = eu.io.read(flist, ext=ext)
    w, = np.where(t['flags'] == 0)
    print("kept: %d/%d  %g" % (w.size, t.size, w.size/t.size))
    return t[w]


def read(flist):
    flist.sort()
    t = _read(flist=flist, ext='objects')
    inj = _read(flist=flist, ext='injections')
    return t, inj


def fit_gmm(*, data, ngauss, min_covar=1.0e-12, show=False):
    gmm = ngmix.gmix_ndim.GMixND()
    gmm.fit(
        data,
        ngauss,
        min_covar=min_covar,
    )

    if show:
        nfac = 10
        r = gmm.sample(data.size*nfac)

        std = data.std()
        binsize = std/7

        plt = hickory.Plot()
        plt.hist(
            data,
            # min=-0.0005, max=0.0005,
            binsize=binsize, alpha=0.5,
        )
        plt.hist(
            r,
            # min=-0.0005, max=0.0005,
            binsize=binsize,
            weights=r*0 + 1/nfac, alpha=0.5,
        )
        plt.show()

    return gmm


def get_mag(*, args, data):
    if len(data['psf_mag'].shape) > 1:
        rmag = data['psf_mag'][:, args.rmag_index]
    else:
        rmag = data['psf_mag']

    return rmag


def select(*, args, data, magmin, magmax):

    rmag = get_mag(args=args, data=data)

    w, = np.where(
        between(rmag, magmin, magmax)
    )
    return w


def dohist(ax, conc, hrange, binsize, weight=None):

    if weight is not None:
        weights = np.zeros(conc.size) + weight
    else:
        weights = None

    ax.hist(
        conc,
        binsize=binsize,
        range=hrange,
        alpha=0.5,
        weights=weights,
    )


def do_cumhist_galfrac(ax, conc, hist, inj_hist, width):

    cumsum = hist.cumsum()
    inj_cumsum = inj_hist.cumsum()
    w, = np.where(cumsum > 0)

    frac_gal = 1 - inj_cumsum[w]/cumsum[w]

    ax.curve(
        conc[w],
        frac_gal,
    )

    w, = np.where((conc > 0) & (conc < 2*width))
    maxval = 1.1*frac_gal[w].max()
    if maxval < 0:
        maxval = 0.1

    ax.set_ylim(bottom=0, top=maxval)


def do_cumhist_starfrac(ax, conc, hist, inj_hist):
    # for galaxy we want to reverse it
    ind = np.arange(conc.size-1, -1, -1)
    crev = conc[ind]
    crevhist = hist[ind]

    inj_crevhist = inj_hist[ind]

    rcumsum = crevhist.cumsum()
    inj_rcumsum = inj_crevhist.cumsum()

    w, = np.where(rcumsum > 0)

    ax.curve(
        crev[w],
        inj_rcumsum[w]/rcumsum[w],
    )


def do_cumhist(
    ax_starfrac, ax_galfrac, binsize, conc, inj_conc, inj_weight, minval,
    width,
):

    inj_weights = np.zeros(inj_conc.size) + inj_weight

    _, cmax = -0.025, 0.05
    hd = eu.stat.histogram(
        conc,
        # min=cmin,
        min=minval,
        max=cmax,
        binsize=binsize,
        more=True,
    )
    inj_hd = eu.stat.histogram(
        inj_conc,
        weights=inj_weights,
        # min=cmin,
        min=minval,
        max=cmax,
        binsize=binsize,
    )

    assert hd['center'].size == inj_hd['center'].size

    for ax in [ax_starfrac, ax_galfrac]:
        ax.axhline(0.01, color='red', alpha=0.5)
        ax.axhline(0.005, color='magenta', alpha=0.5)
        ax.axhline(0.001, color='blue', alpha=0.5)

    do_cumhist_starfrac(ax_starfrac, hd['center'], hd['hist'], inj_hd['whist'])
    do_cumhist_galfrac(ax_galfrac, hd['center'], hd['hist'], inj_hd['whist'],
                       width=width)


def get_amp(*, args, data):
    rmag = get_mag(args=args, data=data)
    if args.output is not None:
        amp_output = args.output.replace(
            '.png', '-fit.png',
        ).replace(
            '.pdf', '-fit.pdf',
        )
    else:
        amp_output = None

    return staramp.get_amp(
        rmag=rmag,
        conc=data['conc'],
        show=args.show,
        output=amp_output,
    )


def main():
    args = get_args()

    xsize = 15
    figsize = (xsize, xsize*0.583)
    plt = Table(4, 4, figsize=figsize)
    starfrac_plt = Table(4, 4, figsize=figsize)
    galfrac_plt = Table(4, 4, figsize=figsize)

    flist = args.flist

    t, inj = read(flist)

    amp = get_amp(args=args, data=t)
    # edges = [
    #     (21, 22),
    #     (22, 23),
    #     (23, 23.5),
    #     (23.5, 24.0),
    #     (24, 24.5),
    #     (24.5, 25),
    # ]

    edges = [
        (17.0, 17.5),
        (17.5, 18.0),
        (18.0, 18.5),
        (18.5, 19.0),

        (19.0, 19.5),
        (19.5, 20.0),
        (20, 20.5),
        (20.5, 21.0),
        (21, 21.5),
        (21.5, 22.0),
        (22, 22.5),
        (22.5, 23),
        (23, 23.5),
        (23.5, 24.0),
        (24, 24.5),
        (24.5, 25),
    ]

    nsig = 3
    magmin, magmax = edges[0]
    # magmin, magmax = 17.0, 18.5
    # magmin, magmax = 17.0, 17.5
    magmin, magmax = 17.0, 18.0
    w = select(args=args, data=t, magmin=magmin, magmax=magmax)
    ww, = np.where(between(t['conc'][w], -0.0005, 0.0005))

    _, ref_std = eu.stat.sigma_clip(t['conc'][w[ww]], nsig=nsig)

    # good at the faint end, but more like -2.5e-05 at the bright end ~17

    winj = select(args=args, data=inj, magmin=magmin, magmax=magmax)
    _, inj_std, subind = eu.stat.sigma_clip(
        inj['conc'][winj], get_indices=True, nsig=nsig,
    )
    inj_std = inj['conc'][winj[subind]].std()

    print('ref std0:', ref_std)
    print('inj std:', inj_std)
    ref_std = np.sqrt(ref_std**2 - inj_std**2)
    print('ref std:', ref_std)

    # got using code in bf.py
    bf_amp = -3.6e-06

    gmm = fit_gmm(
        data=t['conc'][w[ww]],
        ngauss=4,
        show=args.show,
        # min_covar=ref_std**2,
    )
    gmm_samples = gmm.sample(100000)
    gmm_std = gmm_samples.std()

    for i in range(len(edges)):
        magmin, magmax = edges[i]

        ax = plt.axes[i]

        w = select(args=args, data=t, magmin=magmin, magmax=magmax)

        mn, std = eu.stat.sigma_clip(t['conc'][w], nsig=nsig)
        # print('data', mn, std)

        winj = select(args=args, data=inj, magmin=magmin, magmax=magmax)
        inj_mn, inj_std0 = eu.stat.sigma_clip(inj['conc'][winj], nsig=nsig)


        # print('inj', inj_mn, inj_std)

        inj_std = np.sqrt(inj_std0**2 + ref_std**2)

        if i == 0:
            save_inj_std0 = inj_std0
            save_inj_std = inj_std

        width = 4*inj_std
        if width < 0.0005:
            width = 0.0005
        # expand on the right side
        hrange = (-width, width*2)
        binsize = inj_std/4

        ww, = np.where(between(t['conc'][w], -0.0005, 0.0005))
        tmn, tstd = eu.stat.sigma_clip(t['conc'][w[ww]], nsig=nsig)

        ax.set_xlim(hrange[0], hrange[1])
        ax.set_xlabel('concentration')

        dohist(ax, t['conc'][w], hrange, binsize)

        center = (magmin + magmax)*0.5

        label = r'[%.2f, %.2f] $\sigma: %.4g$' % (
            magmin, magmax, inj_std,
        )

        # add the predicted brighter-fatter offset, plus the
        # extra scatter, presumably due to scatter in the PSF

        bf_offset = bf.predict(rmag=center, amp=bf_amp)

        # re-weight to get the right density
        predicted = staramp.predict(rmag=center, amp=amp)

        if False:
            # if inj_std0 > gmm_std:
            #     fac = (inj_std0/gmm_std)**2
            # else:
            #     fac = 1

            # fac = (inj_std0/save_inj_std0)**2
            fac = inj_std/save_inj_std
            if fac < 1:
                fac = 1

            print('fac:', fac)

            new_gmm = ngmix.gmix_ndim.GMixND(
                weights=gmm.weights,
                means=gmm.means + bf_offset,
                covars=gmm.covars*fac**2,
            )

            num = 10000
            pvals = new_gmm.sample(num)
            # pvals = new_gmm.sample(num) + np.random.normal(
            #     scale=ref_std, size=num,
            # )
            weight = predicted / num

            # pvals = inj['conc'][winj] + new_gmm.sample(winj.size)
            # weight = predicted / winj.size

            dohist(ax, pvals, hrange, binsize, weight=weight)

        else:
            pvals = bf_offset + inj['conc'][winj] + np.random.normal(
                scale=ref_std, size=winj.size,
            )

            weight = predicted / winj.size
            dohist(
                ax,
                pvals,
                hrange, binsize,
                weight=weight,
            )

        label = r'[%.2f, %.2f] $\sigma: %.4g$' % (magmin, magmax, inj_std)

        ax_starfrac = starfrac_plt.axes[i]
        ax_galfrac = galfrac_plt.axes[i]
        ax_starfrac.set(
            xlim=hrange,
            xlabel='cumulative conc (right)',
            ylabel='frac stars',
            title=label,
        )
        ax_galfrac.set(
            # xlim=[0, hrange[1]],
            xlim=hrange,
            xlabel='cumulative conc (left)',
            ylabel='frac gals',
            title=label,
        )

        do_cumhist(
            ax_starfrac, ax_galfrac, binsize, t['conc'][w], pvals, weight,
            minval=hrange[0],
            width=width,
        )

        ax.set_title(label)

    if args.show:
        plt.show()
        starfrac_plt.show()
        galfrac_plt.show()

    if args.output is not None:
        print('writing:', args.output)
        plt.savefig(args.output)

        soutput = args.output.replace(
            '.png', '-starfrac.png'
        ).replace(
            '.pdf', '-starfrac.pdf'
        )
        goutput = args.output.replace(
            '.png', '-galfrac.png'
        ).replace(
            '.pdf', '-galfrac.pdf'
        )
        print('writing:', soutput)
        starfrac_plt.savefig(soutput)
        print('writing:', goutput)
        galfrac_plt.savefig(goutput)


if __name__ == '__main__':
    main()
