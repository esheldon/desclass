#!/usr/bin/env python
import numpy as np
import esutil as eu
from esutil.numpy_util import between
import argparse
from desclass import bf


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--star-file', required=True)
    parser.add_argument('--rmag-index', type=int, required=True)
    parser.add_argument('--show', action='store_true',
                        help='show plot on screen')
    parser.add_argument('--output',
                        help='write plot to file')
    return parser.parse_args()


def main():

    args = get_args()
    stars = eu.io.read(args.star_file)

    w, = np.where((stars['conc_flags'] == 0))

    stars = stars[w]

    rmag = stars['psf_mag'][:, args.rmag_index]
    h, rev = eu.stat.histogram(rmag, min=19, max=23, nbin=10, rev=True)

    psf_mag_mean = []
    conc_mean = []
    conc_err = []

    for i in range(len(h)):
        if h[i] > 0:

            w = rev[rev[i]:rev[i+1]]

            mn, std, err, ind = eu.stat.sigma_clip(
                stars['conc'][w],
                get_err=True, get_indices=True,
            )

            wsub = np.where(
                between(stars['conc'][w], mn - 4*std, mn + 4*std)
            )

            psf_mag_mean.append(rmag[w].mean())
            # conc_mean.append(mn)
            conc_mean.append(np.median(stars['conc'][w[wsub]]))
            conc_err.append(err)

    psf_mag_mean = np.array(psf_mag_mean)
    conc_mean = np.array(conc_mean)
    conc_err = np.array(conc_err)

    amp = bf.get_amp(rmag=psf_mag_mean, conc=conc_mean)
    print('amp:', amp)

    if args.show or args.output is not None:
        import hickory
        plt = hickory.Plot(
            # figsize=(12, 12*0.618),
            xlabel='r mag',
            ylabel='conc',
            legend=True,
        )

        label = r'$%.2g \times \mathrm{mag}^{2}$' % amp
        plt.errorbar(psf_mag_mean, conc_mean, conc_err, label='stars')
        pvals = bf.predict(rmag=psf_mag_mean, amp=amp)
        plt.curve(psf_mag_mean, pvals, label=label)

        if args.show:
            plt.show()

        if args.output is not None:
            print('writing:', args.output)
            plt.savefig(args.output)


if __name__ == '__main__':
    main()
